package org.wanbang.study.allDesignMode.constructMode.proxyMode;
/**
* @description: 代理模式
* @author majiajian
* @date 2022/8/17 18:38
* @version 1.0
*/

/**
 *
 * 代理模式有点像⽼⼤和⼩弟，也有点像分销商。主要解决的是问题是为某些资源的访问、对象的类的易
 * ⽤操作上提供⽅便使⽤的代理服务。⽽这种设计思想的模式经常会出现在我们的系统中，或者你⽤到过
 * 的组件中，它们都提供给你⼀种⾮常简单易⽤的⽅式控制原本你需要编写很多代码的进⾏使⽤的服务
 * 类。
 *
 * 类似这样的场景可以想到；
 * 1. 你的数据库访问层⾯经常会提供⼀个较为基础的应⽤，以此来减少应⽤服务扩容时不⾄于数据库连
 * 接数暴增。
 * 2. 使⽤过的⼀些中间件例如；RPC框架，在拿到jar包对接⼝的描述后，中间件会在服务启动的时候⽣
 * 成对应的代理类，当调⽤接⼝的时候，实际是通过代理类发出的socket信息进⾏通过。
 * 3. 另外像我们常⽤的 MyBatis ，基本是定义接⼝但是不需要写实现类，就可以对 xml 或者⾃定义注
 * 解⾥的 sql 语句进⾏增删改查操作。
 *
 */
public class Doc {

    /**
     *
     * 从测试结果可以看到，我们打印了SQL语句，这部分语句是从⾃定义注解中获取的； select
     * userName from user where id = 100001 ，我们做了简单的适配。在mybatis框架中会交给
     * SqlSession 的实现类进⾏逻辑处理返回操作数据库数据
     * ⽽这⾥我们的测试结果是⼀个固定的，如果你愿意更加深⼊的研究可以尝试与数据库操作层进⾏关
     * 联，让这个框架可以更加完善
     *
     */

    /**
     *
     * 关于这部分代理模式的讲解我们采⽤了开发⼀个关于 mybatis-spring 中间件中部分核⼼功能来
     * 体现代理模式的强⼤之处，所以涉及到了⼀些关于代理类的创建以及spring中bean的注册这些知
     * 识点，可能在平常的业务开发中都是很少⽤到的，但是在中间件开发中确实⾮常常⻅的操作。
     * 代理模式除了开发中间件外还可以是对服务的包装，物联⽹组件等等，让复杂的各项服务变为轻量
     * 级调⽤、缓存使⽤。你可以理解为你家⾥的电灯开关，我们不能操作220v电线的⼈⾁连接，但是
     * 可以使⽤开关，避免触电。
     * 代理模式的设计⽅式可以让代码更加整洁、⼲净易于维护，虽然在这部分开发中额外增加了很多类
     * 也包括了⾃⼰处理bean的注册等，但是这样的中间件复⽤性极⾼也更加智能，可以⾮常⽅便的扩
     * 展到各个服务应⽤中
     *
     */
}
