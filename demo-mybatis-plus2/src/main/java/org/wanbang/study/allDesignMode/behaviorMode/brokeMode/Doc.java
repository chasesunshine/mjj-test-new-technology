package org.wanbang.study.allDesignMode.behaviorMode.brokeMode;
/**
* @description: 中介者模式
* @author majiajian
* @date 2022/8/19 14:00
* @version 1.0
*/

/**
 *
 * 中介者模式 要解决的就是复杂功能应⽤之间的᯿复调⽤，在这中间添加⼀层中介者包装服务，对外提供
 * 简单、通⽤、易扩展的服务能⼒。
 * 这样的设计模式⼏乎在我们⽇常⽣活和实际业务开发中都会⻅到，例如；⻜机
 *
 * 降落有⼩姐姐在塔台喊话、⽆论哪个⽅向来的候⻋都从站台上下、公司的系统中有⼀个中台专⻔为你包装所有接⼝和提供统⼀
 * 的服务等等，这些都运⽤了中介者模式。除此之外，你⽤到的⼀些中间件，他们包装了底层多种数据库
 * 的差异化，提供⾮常简单的⽅式进⾏使⽤。
 *
 */
public class Doc {

    /**
     *
     * 以上通过中介者模式的设计思想我们⼿写了⼀个ORM框架，隐去了对数据库操作的复杂度，让外
     * 部的调⽤⽅可以⾮常简单的进⾏操作数据库。这也是我们平常使⽤的 Mybatis 的原型，在我们⽇
     * 常的开发使⽤中，只需要按照配置即可⾮常简单的操作数据库。
     * 除了以上这种组件模式的开发外，还有服务接⼝的包装也可以使⽤中介者模式来实现。⽐如你们公
     * 司有很多的奖品接⼝需要在营销活动中对接，那么可以把这些奖品接⼝统⼀收到中台开发⼀个奖品
     * 中⼼，对外提供服务。这样就不需要每⼀个需要对接奖品的接⼝，都去找具体的提供者，⽽是找中
     * 台服务即可。
     * 在上述的实现和测试使⽤中可以看到，这种模式的设计满⾜了； 单⼀职责 和 开闭原则 ，也就符合
     * 了 迪⽶特原则 ，即越少⼈知道越好。外部的⼈只需要按照需求进⾏调⽤，不需要知道具体的是如何
     * 实现的，复杂的⼀⾯已经有组件合作服务平台处理
     *
     */
}
