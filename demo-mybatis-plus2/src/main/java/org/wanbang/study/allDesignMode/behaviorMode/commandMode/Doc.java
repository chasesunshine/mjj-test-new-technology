package org.wanbang.study.allDesignMode.behaviorMode.commandMode;
/**
* @description: 命令模式
* @author majiajian
* @date 2022/8/19 11:43
* @version 1.0
*/

/**
 *
 * 命令模式在我们通常的互联⽹开发中相对来说⽤的⽐较少，但这样的模式在我们的⽇常中却经常使⽤
 * 到，那就是 Ctrl+C 、 Ctrl+V 。当然如果你开发过⼀些桌⾯应⽤，也会感受到这样设计模式的应⽤场
 * 景。从这样的模式感受上，可以想到这是把逻辑实现与操作请求进⾏分离，降低耦合⽅便扩展。
 *
 * 命令模式是⾏为模式中的⼀种，以数据驱动的⽅式将 命令对象 ，可以使⽤构造函数的⽅式传递给调⽤
 * 者。调⽤者再提供相应的实现为命令执⾏提供操作⽅法。可能会感觉这部分有⼀些饶，可以通过对代码
 * 的实现进⾏理解，在通过实操来熟练。
 * 在这个设计模式的实现过程中有如下⼏个⽐较᯿要的点；
 *      1. 抽象命令类；声明执⾏命令的接⼝和⽅法
 *      2. 具体的命令实现类；接⼝类的具体实现，可以是⼀组相似的⾏为逻辑
 *      3. 实现者；也就是为命令做实现的具体实现类
 *      4. 调⽤者；处理命令、实现的具体操作者，负责对外提供命令服务
 *
 */
public class Doc {

    /**
     *
     * 从上⾯的测试结果可以看到，我们已经交给调⽤者(⼩⼆)的点单，由不同的厨师具体实现(烹饪)。
     * 此外当我们需要不同的菜品时候或者修改时候都可以⾮常⽅便的添加和修改，在具备单⼀职责的类
     * 下，都可以⾮常⽅便的扩展。
     *
     */

    /**
     *
     * 从以上的内容和例⼦可以感受到，命令模式的使⽤场景需要分为三个⽐较⼤的块； 命令 、 实现 、
     * 调⽤者 ，⽽这三块内容的拆分也是选择适合场景的关键因素，经过这样的拆分可以让逻辑具备单
     * ⼀职责的性质，便于扩展。
     * 通过这样的实现⽅式与if语句相⽐，降低了耦合性也⽅便其他的命令和实现的扩展。但同时这样的
     * 设计模式也带来了⼀点问题，就是在各种命令与实现的组合下，会扩展出很多的实现类，需要进⾏
     * 管理。
     * 设计模式的学习⼀定要勤加练习，哪怕最开始是模仿实现也是可以的，多次的练习后再去找到⼀些
     * 可以优化的场景，并逐步运⽤到⾃⼰的开发中。提升⾃⼰对代码的设计感觉，让代码结构更加清晰
     * 易扩展
     *
     */
}
