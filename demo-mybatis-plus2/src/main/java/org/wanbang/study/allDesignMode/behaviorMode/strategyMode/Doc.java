package org.wanbang.study.allDesignMode.behaviorMode.strategyMode;
/**
* @description: 策略模式
* @author majiajian
* @date 2022/8/25 12:12
* @version 1.0
*/

/**
 *
 * 策略模式是⼀种⾏为模式，也是替代⼤量 ifelse 的利器。它所能帮你解决的是场景，⼀般是具有同类
 * 可替代的⾏为逻辑算法场景。⽐如；不同类型的交易⽅式(信⽤卡、⽀付宝、微信)、⽣成唯⼀ID策略
 * (UUID、DB⾃增、DB+Redis、雪花算法、Leaf算法)等，都可以使⽤策略模式进⾏⾏为包装，供给外部
 * 使⽤。
 *
 */
public class Doc {

    /**
     *
     * 整体的结构模式并不复杂，主要体现的不同类型的优惠券在计算优惠券⽅式的不同计算策略。
     * 这⾥包括⼀个借⼝类( ICouponDiscount )以及四种优惠券类型的实现⽅式。
     * 最后提供了策略模式的上下控制类处理，整体的策略服务。
     *
     */

    /**
     *
     * 以上的策略模式案例相对来说不并不复杂，主要的逻辑都是体现在关于不同种类优惠券的计算折扣
     * 策略上。结构相对来说也⽐较简单，在实际的开发中这样的设计模式也是⾮常常⽤的。另外这样的
     * 设计与命令模式、适配器模式结构相似，但是思路是有差异的。
     * 通过策略设计模式的使⽤可以把我们⽅法中的if语句优化掉，⼤量的if语句使⽤会让代码难以扩
     * 展，也不好维护，同时在后期遇到各种问题也很难维护。在使⽤这样的设计模式后可以很好的满⾜
     * 隔离性与和扩展性，对于不断新增的需求也⾮常⽅便承接。
     * 策略模式 、 适配器模式 、 组合模式 等，在⼀些结构上是⽐较相似的，但是每⼀个模式是有⾃⼰的
     * 逻辑特点，在使⽤的过程中最佳的⽅式是经过较多的实践来吸取经验，为后续的研发设计提供更好
     * 的技术输出。
     *
     */
}
