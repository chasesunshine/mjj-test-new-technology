package org.dongfu.study.allDesignMode.behaviorMode.observerMode;
/**
* @description: 观察者模式
* @author majiajian
* @date 2022/8/19 15:20
* @version 1.0
*/

/**
 * 简单来讲观察者模式
 * 就是当⼀个⾏为发⽣时传递信息给另外⼀个⽤户接收做出相应的处理，两者之
 * 间没有直接的耦合关联。例如；狙击⼿、李云⻰
 *
 */
public class Doc {

    /**
     *
     * 除了⽣活中的场景外，在我们编程开发中也会常⽤到⼀些观察者的模式或者组件，例如我们经常使⽤的
     * MQ服务，虽然MQ服务是有⼀个通知中⼼并不是每⼀个类服务进⾏通知，但整体上也可以算作是观察者
     * 模式的思路设计。再⽐如可能有做过的⼀些类似事件监听总线，让主线服务与其他辅线业务服务分离，
     * 为了使系统降低耦合和增强扩展性，也会使⽤观察者模式进⾏处理。
     *
     */


    /**
     *
     * 从我们最基本的过程式开发以及后来使⽤观察者模式⾯向对象开发，可以看到设计模式改造后，拆
     * 分出了核⼼流程与辅助流程的代码。⼀般代码中的核⼼流程不会经常变化。但辅助流程会随着业务
     * 的各种变化⽽变化，包括； 营销 、 裂变 、 促活 等等，因此使⽤设计模式架设代码就显得⾮常有必
     * 要。
     * 此种设计模式从结构上是满⾜开闭原则的，当你需要新增其他的监听事件或者修改监听逻辑，是不
     * 需要改动事件处理类的。但是可能你不能控制调⽤顺序以及需要做⼀些事件结果的返回继续操作，
     * 所以使⽤的过程时需要考虑场景的合理性。
     * 任何⼀种设计模式有时候都不是单独使⽤的，需要结合其他模式共同建设。另外设计模式的使⽤是
     * 为了让代码更加易于扩展和维护，不能因为添加设计模式⽽把结构处理更加复杂以及难以维护。这
     * 样的合理使⽤的经验需要⼤量的实际操作练习⽽来
     *
     */
}
