package org.dongfu.study.allDesignMode.constructMode.flyWeightMode;
/**
* @description: 享元模式
* @author majiajian
* @date 2022/8/17 17:41
* @version 1.0
*/

/**
 *
 * 享元模式，主要在于共享通⽤对象，减少内存的使⽤，提升系统的访问效率。⽽这部分共享对象通常⽐
 * 较耗费内存或者需要查询⼤量接⼝或者使⽤数据库资源，因此统⼀抽离作为共享对象使⽤。
 * 另外享元模式可以分为在服务端和客户端，⼀般互联⽹H5和Web场景下⼤部分数据都需要服务端进⾏
 * 处理，⽐如数据库连接池的使⽤、多线程线程池的使⽤，除了这些功能外，还有些需要服务端进⾏包装
 * 后的处理下发给客户端，因为服务端需要做享元处理。但在⼀些游戏场景下，很多都是客户端需要进⾏
 * 渲染地图效果，⽐如；树⽊、花草、⻥⾍，通过设置不同元素描述使⽤享元公⽤对象，减少内存的占
 * ⽤，让客户端的游戏更加流畅。
 * 在享元模型的实现中需要使⽤到享元⼯⼚来进⾏管理这部分独⽴的对象和共享的对象，避免出现线程安
 * 全的问题
 *
 */
public class Doc {

    /**
     * 可以仔细看下 stock 部分的库存是⼀直在变化的，其他部分是活动信息，是固定的，所以我们使
     * ⽤享元模式来将这样的结构进⾏拆分此场景在服务端减少接⼝的调⽤，在客户端减少内存的占⽤。是这个设计模式的主要应⽤⽅式。
     * 另外通过 map 结构的使⽤⽅式也可以看到，使⽤⼀个固定id来存放和获取对象，是⾮常关键的点。
     * ⽽且不只是在享元模式中使⽤，⼀些其他⼯⼚模式、适配器模式、组合模式中都可以通过map结
     * 构存放服务供外部获取，减少ifelse的判断使⽤。
     * 当然除了这种设计的减少内存的使⽤优点外，也有它带来的缺点，在⼀些复杂的业务处理场景，很
     * 不容易区分出内部和外部状态，就像我们活动信息部分与库存变化部分。如果不能很好的拆分，就
     * 会把享元⼯⼚设计的⾮常混乱，难以维护。
     *
     */

}
